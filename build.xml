<?xml version="1.0" encoding="UTF-8"?>
<project name="editor" default="static-war" basedir=".">

    <description>
        USGS National Map Editor Build File
    </description>

    <property name="build" location="build"/>
    <property name="app.proxy.geoserver" value=""/>
    <property name="app.port" value="8080"/>
    <property name="server" location="${basedir}/server"/>
    <property name="editor" location="${basedir}/editor"/>
    <property name="mvn" value="mvn"/>
    <property name="geoserver-src" location="${server}/geoserver-gssp"/>
    <property name="localrepo" value="-DdummyProperty"/>

    <target name="init">

        <mkdir dir="${build}"/>

        <!-- revert previously patched pom.xml and modified sources -->
        <exec executable="git" dir="${geoserver-src}" failonerror="false">
            <arg value="checkout"/>
            <arg value="."/>
        </exec>

        <echo message="pulling in submodules"/>
        <exec executable="git" failonerror="true">
            <arg line="submodule init"/>
        </exec>
        <exec executable="git" failonerror="true">
            <arg line="submodule sync"/>
        </exec>
        <exec executable="git" failonerror="true">
            <arg line="submodule update"/>
        </exec>

        <!-- 
            Shuffle to get geoscript-js as a geoserver community module.  This
            could be simplified by making the extension a community module.
        -->
        <symlink link="${geoserver-src}/community/geoscript-js" resource="${server}/geoserver-geoscript-js" overwrite="true"/>
        <!-- patch pom.xml to include geoscript-js extension -->
        <patch patchfile="${server}/geoserver-geoscript-js/etc/geoserver.patch" strip="1" dir="${geoserver-src}" failonerror="true"/>
        <!-- finally, link the minimal directory so the build doesn't fail without a specific configId and configDirectory -->
        <symlink link="${geoserver-src}/web/app/minimal" resource="${server}/geoserver/data/minimal" overwrite="true"/>

        <echo message="building ringo jars"/>
        <ant dir="${editor}/externals/ringojs" target="jar"/>

    </target>
    
    <target name="buildjs">

        <mkdir dir="${build}/${ant.project.name}/WEB-INF/app/static/script"/>
        <java jar="${editor}/externals/ringojs/run.jar" fork="true" failonerror="true">
            <sysproperty key="ringo.home" path="${editor}/externals/ringojs"/>
            <arg path="${editor}/externals/buildkit/lib/buildkit/build.js"/>
            <arg line="-o ${build}/${ant.project.name}/WEB-INF/app/static/script ${editor}/buildjs.cfg"/>
        </java>

    </target>
    
    <target name="dist" depends="init, buildjs, redist"/>
    
    <target name="redist">

        <mkdir dir="${build}/${ant.project.name}"/>
        
        <copy todir="${build}/${ant.project.name}">
            <fileset dir="${editor}/src/main/webapp/"/>
        </copy>
        <copy todir="${build}/${ant.project.name}/WEB-INF/lib" flatten="true" includeEmptyDirs="false">
            <fileset dir="${editor}/externals/ringojs/lib"/>
        </copy>
        <copy todir="${build}/${ant.project.name}/WEB-INF/app">
            <fileset dir="${editor}/app">
                <exclude name="**/externals/**"/>
                <exclude name="**/script/**"/>
            </fileset>
        </copy>
        <!-- copy Ext resources -->
        <copy todir="${build}/${ant.project.name}/WEB-INF/app/static/externals/ext">
            <fileset dir="${editor}/app/static/externals/ext"/>
        </copy>
        <!-- copy OpenLayers resources -->
        <copy todir="${build}/${ant.project.name}/WEB-INF/app/static/externals/openlayers/theme">
            <fileset dir="${editor}/app/static/externals/openlayers/theme"/>
        </copy>
        <!-- copy GeoExt resources -->
        <copy todir="${build}/${ant.project.name}/WEB-INF/app/static/externals/geoext/resources">
            <fileset dir="${editor}/app/static/externals/geoext/resources"/>
        </copy>
        <!-- copy gxp resources -->
        <copy todir="${build}/${ant.project.name}/WEB-INF/app/static/externals/gxp/src/theme">
            <fileset dir="${editor}/app/static/externals/gxp/src/theme"/>
        </copy>
    </target>

    <target name="debug">
        <java jar="${editor}/externals/ringojs/run.jar" fork="true">
            <sysproperty key="app.proxy.geoserver" value="${app.proxy.geoserver}"/>
            <sysproperty key="ringo.home" path="${editor}/externals/ringojs"/>
            <arg path="${editor}/app/main.js"/>
            <arg line="-p ${app.port}"/>
        </java>
    </target>

    <target name="debugall">
        <java jar="${editor}/externals/ringojs/run.jar" fork="true">
            <sysproperty key="app.proxy.geoserver" value="${app.proxy.geoserver}"/>
            <sysproperty key="ringo.home" path="${editor}/externals/ringojs"/>
            <arg value="-d"/>
            <arg path="${editor}/app/main.js"/>
            <arg line="-p ${app.port}"/>
        </java>
    </target>
    
    <target name="server">
        <!-- build with maven -->
        <exec executable="${mvn}" dir="${server}" failonerror="true">
	    <arg value="${localrepo}"/>
            <arg value="-DskipTests"/>
            <arg value="-P geosync,geoscript-js,wps"/>
            <arg value="clean"/>
            <arg value="install"/>
        </exec>
    </target>

    <target name="static-war" depends="dist">
        <war destfile="${build}/${ant.project.name}.war" needxmlfile="false">
            <fileset dir="${build}/${ant.project.name}/WEB-INF/app/static"/>
        </war>
    </target>

    <target name="war" depends="dist">
        <war destfile="${build}/${ant.project.name}.war">
            <fileset dir="${build}/${ant.project.name}"/>
        </war>
    </target>

    <target name="clean" description="remove previous build and all dependencies">
        <delete dir="${build}"/>
    </target>
  
</project>
